# main.py
import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog, ttk
import threading
from queue import Queue
import uuid
import csv
import shutil
import logging
from datetime import datetime, timedelta
import pytz
import os

import config
import db_handler
from ui import UIManager
from utils import background_checker, format_timedelta, format_display_time


class RentalApp:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π GUI –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    def __init__(self, master):
        self.master = master
        self.master.title("–ú–µ–Ω–µ–¥–∂–µ—Ä –ê—Ä–µ–Ω–¥—ã (–ö–ª–∏–µ–Ω—Ç)")
        self.master.geometry("1200x800")

        self.rentals, self.history, self.accounts, self.games = [], [], [], []
        self.update_queue = Queue()
        self.ui = UIManager(master, self)

        refresh_button = ttk.Button(self.master, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.full_update)
        refresh_button.pack(pady=5)

        self.full_update()
        self.start_gui_tasks()
        self.master.protocol("WM_DELETE_WINDOW", self.on_closing)
        logging.info("GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    def full_update(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.load_all_data_from_db()
        self.ui.update_all_views(self)

    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ >>>
    def on_game_selection_change(self, *_args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä—ã –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ."""
        self.ui.update_account_menu(self.games, self.accounts)
        self.update_lots_listbox()

    # <<< –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø >>>

    def load_all_data_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î."""
        games_raw = db_handler.db_query("SELECT id, name, funpay_offer_ids FROM games ORDER BY name", fetch="all") or []
        self.games[:] = [{"id": g_id, "name": g_name, "offer_ids": g_ids} for g_id, g_name, g_ids in games_raw]

        game_id_map = {g['id']: g['name'] for g in self.games}
        accounts_raw = db_handler.db_query("SELECT id, login, password, game_id, rented_by FROM accounts",
                                           fetch="all") or []
        self.accounts[:] = [{
            "id": acc_id, "login": login, "password": password, "game_id": game_id,
            "game_name": game_id_map.get(game_id, "N/A"), "rented_by": rented_by
        } for acc_id, login, password, game_id, rented_by in accounts_raw]

        rentals_raw = db_handler.db_query("""
                                          SELECT r.id,
                                                 r.client_name,
                                                 r.start_time,
                                                 r.end_time,
                                                 r.remind_time,
                                                 r.initial_minutes,
                                                 r.info,
                                                 r.is_history,
                                                 a.login,
                                                 a.password,
                                                 g.name
                                          FROM rentals r
                                                   LEFT JOIN accounts a ON r.account_id = a.id
                                                   LEFT JOIN games g ON a.game_id = g.id
                                          """, fetch="all") or []
        new_rentals, new_history = [], []
        for row in rentals_raw:
            item = {"id": row[0], "name": row[1], "start": datetime.fromisoformat(row[2]),
                    "end": datetime.fromisoformat(row[3]),
                    "minutes": row[5], "info": row[6], "account_login": row[8] or "–£–î–ê–õ–ï–ù",
                    "account_password": row[9] or "–£–î–ê–õ–ï–ù",
                    "game": row[10] or "–£–î–ê–õ–ï–ù–ê"}
            if row[7] == 1:
                new_history.append(item)
            else:
                new_rentals.append(item)
        self.rentals[:] = new_rentals
        self.history[:] = new_history

    def update_lots_listbox(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã."""
        listbox = self.ui.lots_listbox
        listbox.delete(0, tk.END)
        selected_game_name = self.ui.game_var.get()
        if not selected_game_name: return

        game = next((g for g in self.games if g['name'] == selected_game_name), None)
        if game and game.get('offer_ids'):
            for lot_id in sorted(game['offer_ids'].split(',')):
                if lot_id: listbox.insert(tk.END, lot_id)

    def add_lot_to_game(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π ID –ª–æ—Ç–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä–µ."""
        selected_game_name = self.ui.game_var.get()
        if not selected_game_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.")
            return

        new_lot_id = self.ui.lot_id_entry.get().strip()
        if not new_lot_id.isdigit():
            messagebox.showerror("–û—à–∏–±–∫–∞", "ID –ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
            return

        game = next((g for g in self.games if g['name'] == selected_game_name), None)
        if not game: return

        current_ids_str = game.get('offer_ids') or ""
        current_ids = set(current_ids_str.split(',')) if current_ids_str else set()

        if new_lot_id in current_ids:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–≠—Ç–æ—Ç ID –ª–æ—Ç–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∏–≥—Ä–µ.")
            return

        current_ids.add(new_lot_id)
        current_ids.discard('')

        new_ids_str = ",".join(sorted(list(current_ids)))
        db_handler.set_game_offer_ids(game['id'], new_ids_str)

        self.ui.lot_id_entry.delete(0, tk.END)
        self.full_update()

    def remove_lot_from_game(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID –ª–æ—Ç–∞ –∏–∑ –∏–≥—Ä—ã."""
        selection = self.ui.lots_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ID –ª–æ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ.")
            return

        lot_id_to_remove = self.ui.lots_listbox.get(selection[0])
        selected_game_name = self.ui.game_var.get()
        game = next((g for g in self.games if g['name'] == selected_game_name), None)
        if not game: return

        current_ids_str = game.get('offer_ids') or ""
        current_ids = set(current_ids_str.split(','))
        current_ids.discard(lot_id_to_remove)

        new_ids_str = ",".join(sorted(list(current_ids)))
        db_handler.set_game_offer_ids(game['id'], new_ids_str)
        self.full_update()

    def update_rental_details(self, rental_id, new_name, new_info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ –≤ –ë–î."""
        db_handler.db_query(
            "UPDATE rentals SET client_name = ?, info = ? WHERE id = ?",
            (new_name, new_info, rental_id)
        )

    def edit_account(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        selection = self.ui.accounts_tree.selection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        account_id = selection[0]
        account_to_edit = next((acc for acc in self.accounts if acc["id"] == int(account_id)), None)

        if account_to_edit:
            self.ui.show_account_editor_window(account_to_edit, self.full_update)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")

    def update_account_details(self, account_id, new_login, new_password):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î."""
        db_handler.update_account(account_id, new_login, new_password)
    def start_gui_tasks(self):
        gui_checker_thread = threading.Thread(target=background_checker, args=(self.rentals, self.update_queue),
                                              daemon=True)
        gui_checker_thread.start()
        self.process_queue()
        self.update_clock()
        self.refresh_timers()

    def process_queue(self):
        try:
            while not self.update_queue.empty():
                message_type, data = self.update_queue.get_nowait()
                if message_type == "reminder":
                    self.master.bell()
                    self.ui.show_non_blocking_notification("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                                                           f"‚è∞ –ê—Ä–µ–Ω–¥–∞ –¥–ª—è {data.get('name')} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!")
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ GUI: {e}")
        finally:
            self.master.after(200, self.process_queue)

    def on_closing(self):
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
            self.master.destroy()

    def update_clock(self):
        self.ui.clock_label.config(text=f"–ú–°–ö: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M:%S')}")
        self.master.after(1000, self.update_clock)

    def refresh_timers(self):
        self.ui.update_rentals_table(self.rentals)
        self.master.after(60000, self.refresh_timers)

    def add_client(self):
        try:
            name = self.ui.entry_name.get().strip()
            info = self.ui.entry_info.get().strip()
            game_name = self.ui.game_var.get()
            account_display = self.ui.account_var.get()
            days = int(self.ui.entry_days.get() or 0)
            hours = int(self.ui.entry_hours.get() or 0)
            minutes = int(self.ui.entry_minutes.get() or 0)
            total_minutes = (days * 1440) + (hours * 60) + minutes
            if not all([name, game_name, account_display]) or "–°–≤–æ–±–æ–¥–Ω—ã—Ö" in account_display:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—è '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', '–ò–≥—Ä–∞' –∏ '–ê–∫–∫–∞—É–Ω—Ç' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
                return
            if total_minutes <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
                return
            login, password = account_display.split(" / ", 1)
            account_id = next((acc['id'] for acc in self.accounts if acc['login'] == login), None)
            if not account_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞.")
                return
            success = db_handler.create_rental_from_gui(name, account_id, total_minutes, info)
            if success:
                self.ui.clear_input_fields()
                self.full_update()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ.")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–î–Ω–∏, —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{e}")

    def remove_selected(self):
        selection = self.ui.tree.selection()
        if not selection: return
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é?"):
            for rental_id in selection:
                db_handler.move_rental_to_history(rental_id)
            self.full_update()

    def edit_rental(self, _event=None):
        if not self.ui.tree.selection(): return
        item_id = self.ui.tree.selection()[0]
        rental_to_edit = next((r for r in self.rentals if r.get("id") == item_id), None)
        if not rental_to_edit: return
        self.ui.show_editor_window(rental_to_edit, self.full_update)

    def extend_rental(self):
        selection = self.ui.tree.selection()
        if not selection: return
        item_id = selection[0]
        minutes_to_add = self.ui.ask_duration_popup()
        if minutes_to_add is None or minutes_to_add <= 0: return
        success = db_handler.extend_rental_from_gui(item_id, minutes_to_add)
        if success:
            self.full_update()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É.")

    def remove_from_history(self):
        if not self.ui.history_tree.selection(): return
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏?"):
            for item_id in self.ui.history_tree.selection():
                db_handler.db_query("DELETE FROM rentals WHERE id = ?", (item_id,))
            self.full_update()

    def add_game(self):
        new_game = simpledialog.askstring("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:", parent=self.master)
        if new_game and new_game.strip():
            db_handler.add_game(new_game.strip())
            self.full_update()

    def remove_game(self):
        game_name = self.ui.game_var.get()
        if not game_name: return
        game_id = next((g['id'] for g in self.games if g['name'] == game_name), None)
        if not game_id: return
        if db_handler.remove_game(game_id):
            self.full_update()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É, –ø–æ–∫–∞ –∫ –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã.")

    def add_account(self):
        game_name = self.ui.game_var.get()
        if not game_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.")
            return
        game_id = next((g['id'] for g in self.games if g['name'] == game_name), None)
        if not game_id: return
        login = simpledialog.askstring("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", parent=self.master)
        if not login or not login.strip(): return
        password = simpledialog.askstring("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", parent=self.master)
        if not password: return
        db_handler.add_account(login.strip(), password, game_id)
        self.full_update()

    def remove_account(self):
        selection = self.ui.accounts_tree.selection()
        if not selection: return
        for item_id in selection:
            item_values = self.ui.accounts_tree.item(item_id, 'values')
            if item_values[3] == "–ó–∞–Ω—è—Ç":
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ê–∫–∫–∞—É–Ω—Ç {item_values[1]} –∑–∞–Ω—è—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω.")
                return
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã?"):
            for item_id in selection:
                item_values = self.ui.accounts_tree.item(item_id, 'values')
                db_handler.remove_account_by_login(item_values[1])
            self.full_update()

    def export_accounts_to_csv(self):
        if not self.accounts:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV-—Ñ–∞–π–ª—ã", "*.csv")],
                                                 title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∫–∞–∫...")
        if not file_path: return
        headers = ["–ò–≥—Ä–∞", "–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å", "–°—Ç–∞—Ç—É—Å", "–ö–µ–º –∑–∞–Ω—è—Ç"]
        try:
            with open(file_path, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(headers)
                for acc in self.accounts:
                    writer.writerow([acc.get('game_name', 'N/A'), acc.get('login'), acc.get('password'),
                                     "–ó–∞–Ω—è—Ç" if acc.get("rented_by") else "–°–≤–æ–±–æ–¥–µ–Ω", acc.get("rented_by", "-")])
            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", f"–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{file_path}")
        except IOError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞:\n{e}")

    def import_accounts_from_csv(self):
        file_path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ CSV –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", filetypes=[("CSV-—Ñ–∞–π–ª—ã", "*.csv")])
        if not file_path: return
        imported, skipped = db_handler.import_accounts_from_csv(file_path)
        if imported is None:
            messagebox.showerror("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
            return
        messagebox.showinfo("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                            f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {imported} –∞–∫–∫.\n–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –∏–≥—Ä—ã): {skipped} –∞–∫–∫.")
        self.full_update()

    def export_history_to_csv(self):
        if not self.history:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –∞—Ä–µ–Ω–¥ –ø—É—Å—Ç–∞.")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV-—Ñ–∞–π–ª—ã", "*.csv")],
                                                 title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫...")
        if not file_path: return
        headers = ["ID", "–ö–ª–∏–µ–Ω—Ç", "–ò–≥—Ä–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–∞—á–∞–ª–æ", "–û–∫–æ–Ω—á–∞–Ω–∏–µ", "–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å", "–ò–Ω—Ñ–æ"]
        try:
            with open(file_path, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(headers)
                for item in sorted(self.history, key=lambda x: x['start'], reverse=True):
                    writer.writerow([item.get('id'), item.get('name'), item.get('game'),
                                     format_timedelta(timedelta(minutes=item.get('minutes', 0))),
                                     item.get('start').strftime('%Y-%m-%d %H:%M:%S') if item.get('start') else '',
                                     item.get('end').strftime('%Y-%m-%d %H:%M:%S') if item.get('end') else '',
                                     item.get('account_login'), item.get('account_password'), item.get('info')])
            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", f"–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:\n{file_path}")
        except IOError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞:\n{e}")

    def backup_database(self):
        backup_path = filedialog.asksaveasfilename(title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", defaultextension=".db",
                                                   filetypes=[("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "*.db")],
                                                   initialfile=f"rentals_backup_{datetime.now().strftime('%Y-%m-%d')}.db")
        if not backup_path: return
        try:
            shutil.copy(config.DB_FILE, backup_path)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:\n{backup_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n{e}")

    def restore_database(self):
        if not messagebox.askokcancel("–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï",
                                      "–í–ù–ò–ú–ê–ù–ò–ï!\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ó–ê–ú–ï–ù–ò–¢ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"): return
        restore_path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                                                  filetypes=[("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "*.db")])
        if not restore_path: return
        try:
            shutil.copy(restore_path, config.DB_FILE)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            self.full_update()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n{e}")


if __name__ == "__main__":
    log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - [%(funcName)s] - %(message)s')
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    if not os.path.exists(os.path.dirname(config.LOG_FILE)):
        os.makedirs(os.path.dirname(config.LOG_FILE))
    file_handler = logging.FileHandler(config.LOG_FILE, 'a', 'utf-8')
    file_handler.setFormatter(log_formatter)
    root_logger.addHandler(file_handler)
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)
    root_logger.addHandler(console_handler)

    logging.getLogger('apscheduler').setLevel(logging.WARNING)

    logging.info("=" * 30)
    logging.info("–ó–∞–ø—É—Å–∫ GUI –∫–ª–∏–µ–Ω—Ç–∞...")
    try:
        if not os.path.exists(config.DB_FILE):
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.DB_FILE}")
            exit()
        db_handler.initialize_and_update_db()
        root = tk.Tk()
        app = RentalApp(root)
        root.mainloop()
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –°–º. –ª–æ–≥-—Ñ–∞–π–ª.\n–û—à–∏–±–∫–∞: {e}")