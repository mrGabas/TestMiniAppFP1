import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import TELEGRAM_BOT_TOKEN, TELEGRAM_ADMIN_CHAT_ID
from db_handler import (
    initialize_and_update_db, check_and_process_expired_rentals,
    get_rentals_for_reminder, mark_rental_as_reminded
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


async def send_admin_message(bot: Bot, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É."""
    try:
        if TELEGRAM_ADMIN_CHAT_ID:
            await bot.send_message(TELEGRAM_ADMIN_CHAT_ID, text)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


async def check_rentals_periodically(bot: Bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    while True:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥
            freed_games = check_and_process_expired_rentals()
            if freed_games:
                logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã –¥–ª—è –∏–≥—Ä —Å ID: {freed_games}")
                await send_admin_message(bot, f"‚úÖ –ê—Ä–µ–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")

            # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            rentals_to_remind = get_rentals_for_reminder()
            if rentals_to_remind:
                for rental_id, client_name, chat_id in rentals_to_remind:
                    try:
                        await send_admin_message(bot,
                                                 f"üîî –ü–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client_name} (–∞—Ä–µ–Ω–¥–∞ #{rental_id})")
                        mark_rental_as_reminded(rental_id)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞—Ä–µ–Ω–¥—ã {rental_id}: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω–¥: {e}")
            await send_admin_message(bot, f"‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω–¥: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    initialize_and_update_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω–¥
    asyncio.create_task(check_rentals_periodically(bot))

    # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å FunPay
    # asyncio.create_task(listen_funpay(bot))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    await send_admin_message(bot, "üöÄ –ë–æ—Ç (—Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å) –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º long polling
    try:
        # –ú—ã —É–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
